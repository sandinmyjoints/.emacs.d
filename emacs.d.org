# -*- default-directory: "/Users/william/.emacs.d"; -*-
#+TITLE: emacs.d.org
#+DATE: <2017-07-28 Fri>
#+AUTHOR: William Bert
#+EMAIL: william.bert@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:nil c:nil
#+OPTIONS: creator:comment d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:nil p:nil pri:nil stat:t tags:nil tasks:t tex:t timestamp:nil toc:nil
#+OPTIONS: todo:t |:t
#+STARTUP: overview
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
* How to recover a frozen Emacs process
  - kill -USR2
  - Then set debug-on-quit back to nil
* cl- functions such as first/cl-first
  - https://github.com/purcell/emacs.d/blob/effd06ad39f73cf84bdfde082d986827547ee00e/lisp/init-lisp.el#L285
* DONE Use ELPA.
   CLOSED: [2013-02-18 Mon 14:51]
* DONE Make into repo.
   CLOSED: [2013-02-18 Mon 14:52]
* DONE Use submodules where possible.
   CLOSED: [2013-02-18 Mon 14:52]

* DONE Don't ignore all of elisp dir
  CLOSED: [2013-02-18 Mon 15:52]
* DONE Coffee-script ctags.
  CLOSED: [2013-02-18 Mon 16:51]
  - https://gist.github.com/mads379/907245
  - trying: ctags -e -R --exclude=*.js --exclude=node_modules .
    but it doesn't do coffee, despite putting coffee definitions in .ctags and .etags
  - this command worked:
ctags -e -R --exclude=*.js --exclude=node_modules --exclude=local_notes \
--langdef=coffee \
--langmap=coffee:.coffee \
--regex-coffee="/^class ([A-Za-z.]+)( extends [A-Za-z.]+)?$/\1/c,class/" \
--regex-coffee="/^[ \t]*@?([A-Za-z.]+):.*[-=]>.*$/\1/f,function/" \
--regex-coffee="/^[ \t]*([A-Za-z.]+)[ \t]+=.*[-=]>.*$/\1/f,function/" \
--regex-coffee="/^[ \t]*([A-Za-z.]+)[ \t]+=[^->\n]*$/\1/v,variable/" \
.

  - but only sort of. the definitions don't really work across modules and such.
* DONE Emacs in Chrome
  CLOSED: [2013-02-20 Wed 21:27]

  - via SSH in Chrome: https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo
  - some discussion: http://lists.gnu.org/archive/html/emacs-devel/2012-01/msg00421.html
* DONE Try Emacs Mac Port
  CLOSED: [2013-02-19 Tue 22:02]
  - https://github.com/railwaycat/emacs-mac-port
* DONE Fullscreen Emacs
  CLOSED: [2013-02-20 Wed 21:28]
* DONE Fix multiple-cursors and expand-region                           :bug:
  CLOSED: [2013-03-10 Sun 13:08]

  - [X] Fixed some compile errors.
  - [X] Still getting other errors from espuds.
  - [X] mark next like this errors:
    - https://github.com/magnars/multiple-cursors.el/issues/39
    - supposedly fixed in emacs trunk, but 24.3-rc1 not working
    - upgraded, moved to packages instead of submods
* DONE S-up and S-down in org-mode
  CLOSED: [2013-03-10 Sun 13:18]

* DONE Diff Colors in Magit
  CLOSED: [2013-03-10 Sun 18:51]

* DONE Use safer require / don't error out if package isn't installed
  CLOSED: [2013-03-10 Sun 21:05]
  - (when (require 'foo nil t) ...) ;; last argument to require means to simply
    return nil but not signal an error in the event that a feature cannot be
    loaded.

* DONE Test out full install on virgin Emacs
  CLOSED: [2013-03-10 Sun 21:20]

** DONE Emacs 23
   CLOSED: [2013-03-10 Sun 21:20]

** DONE Emacs 24
   CLOSED: [2013-03-10 Sun 21:20]
* DONE Files to visit on startup in non-dirtree window.
  CLOSED: [2013-03-10 Sun 21:21]
   - E.g.: (find-file "~/emacs/gist-3743892/init.el")
* DONE Command as meta in Terminal
  CLOSED: [2013-03-10 Sun 21:44]
  - https://github.com/aim-stuff/cmd-key-happy
  - Collision between M-v/Cmd-v. Bind scroll-down-command to <M-up> as well.

* DONE Host windata.el on github
  CLOSED: [2013-03-10 Sun 21:49]
* DONE Stripped down version for text terminals/new machines, or infer what libraries are installed/exist, or install them automatically.
  CLOSED: [2013-03-10 Sun 21:51]
  - [X] bare.el.
  - [ ]

* DONE Sometimes C-p and C-n skip a line                                :bug:
  CLOSED: [2013-05-19 Sun 15:13]

  - May only happen in Emacs-Mac-24.3? no, now also happens in Emacs-24.3
    - Happens in Emacs-Mac, both 24.2 and 24.3-rc1 and 24.3
    - Does not happen in Cocoa Emacs
    - Happens in emacsforosx.com 24.3
  - Repro: C-p skips first non-blank line after a blank line. See example.
    - Repro: use C-n to move past, main-config.coffee line 21, then use C-p to
    move back, it will skip line 21
    - Easiest: ./Emacs -Q, then visit ~/emacs-ctl-p-skip-lines-example
  - Conditions
    - Happens both when line-move-visual is nil and t
    - Happens in all modes
    - Happens with -nw from console
    - Does not happen with -Q from console
    - Does not happen with -nw -q from console. So what is causing it?
    -
    - Not multiple-cursors, expand-region, or smart-forward
    - it's fill-column-indicator
    - Happens with Emacs 24.3 from emacsforosx.com both -nw and windowed.
    - repro from -Q:
  - Obtain fill-column-indicator. I'm using version 20130126.1540 from Melpa.
  - (add-to-list 'load-path "/Users/william/.emacs.d/elpa/fill-column-indicator-20130126.1540/")
  - (require 'fill-column-indicator nil t)
  - Create new buffer in fundamental mode
  - M-x turn-on-fci-mode
  - Type the following until EOF, preserving newlines:

C-p will skip

C-p will land here
C-p will skip

Start here
EOF

1. Place cursor on "Start here" line, then hit C-p. Behavior will match what
   the text says.
2. describe-variable line-move-visual is nil
   - filed a bug https://github.com/alpaker/Fill-Column-Indicator/issues/32
   - dup of https://github.com/alpaker/Fill-Column-Indicator/issues/31
* DONE conditionally add packages to package list
  CLOSED: [2013-05-12 Sun 12:54]

  - .e.g, rainbow-mode only if Emacs >=24
  -

* DONE make ` a paired char
  CLOSED: [2013-05-19 Sun 15:36]
* DONE linum
  CLOSED: [2013-05-19 Sun 15:44]
* DONE Try out yasnippets
  CLOSED: [2014-01-26 Sun 14:50]
  - remember that yasnippets wants snippets in a directory named after the
    mode they are used in -- that is why coffee-mode didn't work when it was
    in a directory named yasnippet-coffee-script-snippets, and why js
    snippets didn't work in js2-mode (Javascript IDE) when they were in js-mode.
* DONE Fix the submodule -dirty caused by .elc files
  CLOSED: [2013-06-30 Sun 15:10]

  - Maybe just use more packages and fewer submodules
  - git status --ignore-submodules=untracked
  - http://stackoverflow.com/questions/3240881/git-can-i-suppress-listing-of-modified-content-dirty-submodule-entries-in-sta

* DONE Fix client test marker in coffee files
  CLOSED: [2013-08-11 Sun 18:18]

  - C-c C-l
  - (define-key map (kbd "C-c C-l") 'coffee-send-line) in coffee-mode.el
  - Currently fixing this by commenting out the key binding in coffee-mode.
    Better to override the key-map, but because of the way I'm setting up the
    custom marker functions, that is not straightforward.
  - look at set-temporary-overlay-map
* DONE Fix save mark to register/jump to register                       :bug:
  CLOSED: [2013-07-03 Wed 12:45]
  - what is breaking this?
  - broken everywhere?
  - repro?
* DONE dired: edit with, shell commands
  CLOSED: [2013-07-03 Wed 12:46]
  - C-x C-q to start editing, C-c C-c to finish
  - http://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Commands-in-Dired.html
* DONE magit log crashes                                                :bug:
  CLOSED: [2013-07-03 Wed 12:47]

  - repro: open a git repo (did it with both fluencia and .emacs.d) in
    magit-status. magit-log. quit out of log. quit out of magit-status. repeat a few
    times until it crashes.
  - crashes in draw_glyphs
  - repro from emacs -Q
  - (add-to-list 'load-path "./elisp/magit")
  - (load-file 'magit)
  - Open a file that is in a git repo.
  - magit-status
  - l for magit-log
  - l for short log
  - submitted as http://debbugs.gnu.org/cgi/bugreport.cgi?bug=14378
  - severity 14378 important
** DONE Keep Magit from slowing down after being open for a while.
   CLOSED: [2018-09-01 Sat 22:24]

  - Try profiling: http://stackoverflow.com/a/6732810
  - Likely due to use of magit-log
  - maybe track magit maint branch instead?
* DONE incremental-search breaks                                        :bug:
  CLOSED: [2014-01-26 Sun 14:50]

  - Maybe related to org-mode?
  - One time, broke in everything but org-mode.
  - Maybe related to recursive editing
  - In emacs-lisp-mode, get (wrong-type-argument stringp nil)
  - Got out of it by 1) C-g several times or 2) ESC several times. or 3) Doing
    C-s and immediately backspace.
  - http://www.gnu.org/software/emacs/manual/html_node/emacs/Error-in-Isearch.html#Error-in-Isearch
* DONE map chef node names to aws ips
  CLOSED: [2014-01-26 Sun 14:51]
  - goal -- map instance name to ipv4, public_hostname
  - use tramp with chef node name
  - emacs overlays to replace ipv4 or public_hostname with chef node name: http://www.gnu.org/software/emacs/manual/html_node/elisp/Overlays.html
  - inverse: when I input aws-*, emacs looks up public_hostname or IP.
  - knife list nodes| knife xargs show
  - ec2.public_ipv4 and ec2.public_hostname
  - gem install knife-essential
  - brew install jq
  - knife show nodes/aws-staging-wordpop-oneiric-m1s-00.json|sed "1 d"|jq '.automatic.ec2'
  - knife show nodes/aws-staging-wordpop-oneiric-m1s-00.json|sed "1 d"|jq '.automatic.ec2.public_ipv4'
  - [X] look up values from knife commands. cache values. ability to force refresh.
  - [X] new rake command: rake query_ip[*,*] does all. How to get emacs to be able
    to run? rvm_use 1.9.3@ops && cd ~/scm/sd/ops/chef && rake query_ip[*,*]
  - [ ] need to parse input to tramp
    - look at tramp-file-name-host in tramp.el. do advice for it?
    - it was tramp-dissect-file-name that needed advice.
  - or could make a fn that takes (node name, file) and then calls tramp fn to open
    file on node name
* DONE node repl
  CLOSED: [2014-01-28 Tue 23:23]
* DONE recognize virtualenvs
  CLOSED: [2014-01-28 Tue 23:41]
  - https://github.com/porterjamesj/virtualenvwrapper.el
* DONE Emacs golf
  CLOSED: [2014-09-29 Mon 19:36]
* DONE try flx / flx-ido
  CLOSED: [2014-09-29 Mon 19:37]
* DONE session save / restore
  - http://www.gnu.org/savannah-checkouts/gnu/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html
* DONE Appearance
  CLOSED: [2014-09-29 Mon 20:10]
** INACTIVE Set window position on startup.
   CLOSED: [2014-09-29 Mon 20:09]
   - not needed since it's fullscreen
** DONE Toggle on fullscreen.
   CLOSED: [2014-03-10 Mon 09:43]
* DONE better comment box
  CLOSED: [2014-10-02 Thu 08:19]
   - http://www.emacswiki.org/emacs/rebox2
** TODO customize for js
** TODO customize for coffee
* INACTIVE Colors on Emacs 23 on a console
  CLOSED: [2017-08-01 Tue 17:33]

  - Background face on transparent terminals is awful
  - install color-theme and choose one
  - magit is messed up
  - Revisit appearance.el and make sensible settings for a windowed display vs a
    terminal display
  - Is it better/easier not to use transparent background in Terminal?
* DONE Try perspective or eproject or...
  CLOSED: [2017-03-09 Thu 21:57]
  - https://github.com/nex3/perspective-el -- tried it, perspective is not what
    I want, it limits you to buffers and files within current project
  - https://github.com/jrockway/eproject
  - https://github.com/rdallasgray/project-persist
  - https://github.com/bbatsov/projectile
    - https://github.com/sabof/project-explorer instead of dirtree
* DONE flycheck mode
  CLOSED: [2017-08-01 Tue 17:33]
** DONE flycheck with coffeelint
  - In Ataltana, it uses coffeelint that is on the exec-path due to
    ./node_modules/.bin being on the execpath and due to installing coffeelint in
    package.json directly. It errors out, probably an old version.
  - Most of the time, we don't have coffeelint in package.json, but rather
    grunt-coffeelint. So I am installing coffeelint globally so that its always
    available. That works!
** INACTIVE Coffee-script compile and flymake.
   CLOSED: [2017-07-28 Fri 20:51]
  - Way to use coffee-watch?
  - https://github.com/purcell/flymake-coffee
  - Need to specify coffee binary in dir-locals, per project
  - http://alex.kavanagh.name/2012/03/linting-coffee-script-in-emacs/
** INACTIVE rst / sphinx
   CLOSED: [2017-07-28 Fri 20:51]
   - it is using the version of sphinx that is on the exec-path due to venv-activate
   - in eng-docs or hegemone, it errors out because sphinx is too old for the
     checker.
** DONE have flycheck show that a buffer has errors in mode line
   CLOSED: [2017-07-29 Sat 21:58]
* INACTIVE coffee-mode sourcemap
  CLOSED: [2017-08-01 Tue 17:33]
  - https://github.com/syohex/emacs-sourcemap
  - https://github.com/defunkt/coffee-mode/issues/202#issuecomment-37097782
* INACTIVE find-file-in-project. See: http://emacswiki.org/emacs/FindFileInProject
  CLOSED: [2017-08-01 Tue 17:34]
* INACTIVE w3m
  CLOSED: [2017-08-01 Tue 17:34]
  - try for gmail
* INACTIVE Octopress and Emacs
  CLOSED: [2017-08-01 Tue 17:34]

  - Want to:
    - [-] create new write post
      - wrapper around rake new_post[title]
      - [X] octomacs-new-post
      - [X] write post in MD
      - [ ] write post in org
    - [ ] preview
      - temporary: could open a new shell and run rvm
        - (ansi-term explicit-shell-file-name (concat "*" 'project "-term" "*"))
      - rake generate
      - rake preview
    - [-] start watch
      - [X] octopress-shell
      - [ ] start in a new shell: rake watch
    - [ ] publish
      - rake generate
      - git commit -am
      - git push origin master
      - git push heroku master
  - Octopress installation instructions:
    - git clone git@github.com:sandinmyjoints/williamjohnbert.com.git
    - rvm use 1.9.3@octopress
    - `gem install bundler` && `bundle install`
    - edit .rvmrc to be rvm use 1.9.3@octopress
      - additional:
        http://www.moncefbelyamani.com/how-to-install-and-configure-octopress-on-a-mac/
        and http://www.moncefbelyamani.com/enhance-your-ruby-development-with-rvm-gemsets-and-rvmrc/
    - Config Heroku: http://octopress.org/docs/deploying/heroku/
  - Octopress on Emacs options
    + https://github.com/jhelwig/octomacs
      + rvm.el
    + https://github.com/yoshinari-nomura/org-octopress
  - Heroku [3/3]
    - [X] upgrade to heroku toolbelt
    - [X] install heroku accounts plugin
    - [X] spanishdict / wjb accounts



* emacs core
* TODO understand recursive editing
* TODO fix recursive editing -- seems to be broken
* TODO Master regexp syntax
  - use rx: http://www.emacswiki.org/emacs/rx to build regexps
  - even better: pcre2el: https://github.com/joddie/pcre2el
    - usage: https://github.com/joddie/pcre2el#use-from-lisp
    - re-builder support: https://github.com/joddie/pcre2el#re-builder-support
#+BEGIN_SRC

#+END_SRC
* TODO Window and frame restore. See:
  - Seems
  - https://github.com/emacs-mirror/emacs/blob/master/lisp/frameset.el in Emacs 24.4
  - http://www.emacswiki.org/emacs/LayoutRestore
  - http://www.emacswiki.org/emacs/FrameConfig
  - http://www.emacswiki.org/emacs/SessionManagement
  - http://www.gentei.org/~yuuji/software/windows.el
  - http://www.gentei.org/~yuuji/software/revive.el
* TODO make xref-goto-xref snappier
    - https://lists.gnu.org/archive/html/emacs-devel/2016-01/msg01385.html
    - https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html
    - https://emacs.cafe/emacs/javascript/setup/2017/05/09/emacs-setup-javascript-2.html

* setq vs setq-default
  - from https://stackoverflow.com/a/18173666/599258tq-and-setq-default-in-emacs-lisp
#+BEGIN_QUOTE
If a variable is buffer-local, then setq sets its local value in the current
buffer and setq-default sets the global default value.

If a variable is not buffer-local, then setq and setq-default do the same thing.
#+END_QUOTE
* emacs.d
* DONE init-local for machine-specific configs
  CLOSED: [2015-07-10 Fri 17:01]
  - eg, initial files to open
  - not under source control
  - -> use custom.el
  - [ ] move stuff into it
* DONE use use-package
  CLOSED: [2018-01-17 Wed 09:39]
  - https://github.com/jwiegley/use-package
* DONE convert to use-package/speed up startup
  CLOSED: [2019-04-03 Wed 14:41]
    - use-package
    - require-package
    - packages-install
    - https://www.reddit.com/r/emacs/comments/56fvgd/is_there_a_way_to_stop_emacs_from_adding_the/
    - https://emacs.stackexchange.com/questions/38368/how-can-i-improve-startup-time-despite-many-packages
* TODO use more of use-package
  - :preface -- good place for custom defuns
  - :after -- dependent packages
  - :defines
  - :functions
  - :delight -- diminish
  - https://github.com/jwiegley/use-package#add-preface-occurring-before-everything-except-disabled
  - https://www.reddit.com/r/emacs/comments/6i7ha2/usepackage_for_a_dependency_or_not_setq_options/
** TODO optimization
   - https://www.reddit.com/r/emacs/comments/6klmh6/diffhl_mode_doesnt_load_with_defer_1_in_usepackage/
* TODO package-initialize can be delayed until after main.el
* TODO fresh .emacs.d installs all needed packages
* TODO portable .emacs.d
* TODO literate .emacs.d
* TODO prefix all my stuff with wjb/



* packages
* TODO Versioning of packages--how to pin?
* TODO try Cask
  - cask.github.io


* org-mode
  - export settings https://orgmode.org/manual/Export-settings.html#index-_0023_002bOPTIONS
* DONE rename from *-todo.org to *.org
   CLOSED: [2014-03-18 Tue 10:21]
* DONE org mode default settings
  CLOSED: [2018-01-25 Thu 16:11]
  - http://orgmode.org/manual/In_002dbuffer-settings.html
  - https://orgmode.org/manual/Export-settings.html#Export-settings
  - see top of this buffer
* INACTIVE nice export to google docs
  - via odt: https://orgmode.org/manual/OpenDocument-Text-export.html#OpenDocument-Text-export
   - org to plan, org exports to odt for import into google docs
     - https://orgmode.org/manual/Applying-custom-styles.html#Applying-custom-styles
* DONE helm search of org headlines
  - helm-org-rifle
* ACTIVE why does point go to BOL after running org-toggle-item
  - when I run org-toggle to change a headline to a list item
#+BEGIN_SRC q
org-ctrl-c-minus is an interactive compiled Lisp function in 'org.el'.

(org-ctrl-c-minus)

Insert separator line in table or modify bullet status of line.
Also turns a plain line or a region of lines into list items.
Calls 'org-table-insert-hline', 'org-toggle-item', or
'org-cycle-list-bullet', depending on context.

#+END_SRC
  1) when it's cycling between list bullets, it's fine, point stays where it is
  2) but when it's going from a headline to a bullet, it puts point at BOL
     instead of leaving it where it is
* TODO helm source: github
* TODO helm source: pivotal
* TODO easy, nice-looking org export
   - to markdown
   - to HTML:
     - https://github.com/fniessen/org-html-themes
     - https://www.reddit.com/r/emacs/comments/6r32q4/orgmode_whats_your_html_export_look_like/
** TODO try https://github.com/xiaoxinghu/orgajs/
* TODO notion integration                                          :wishlist:
  - approach: org to md for import into notion
  - approach: edit with emacs or atomic chrome
  - approach: org to notion exporter? write command that exports a buffer or
    subtree to md and uploads it using the unofficial API
    -
* TODO Pivotal Tracker: create and edit tickets                    :wishlist:
  - approach: org to md for c/p into pt
  - approach: edit with emacs or atomic chrome
  - approach: write org-walker, org-to-pt
  - approach: pt interface in emacs
** ideal flow
   - org to PT, creates PT tickets
     - top level is release or epic
     - level 2 is ticket
       - keyword is ticket type: feature, chore, bug
       - tags are labels
     - level 3 is sections within description
       - bullet points are description
** try https://github.com/org-pivotal/org-pivotal
   - C-c ( i install, p push, f fetch
*** wishlist
    - be collapsed after fetch all
    - option to show ticket id in org headline (though the headline is the title)
    - option to leave headlines that aren't PT tickets alone (currently it removes them
      when doing a fetch)
** try https://github.com/jxa/pivotal-tracker
*** forks
    - https://github.com/emacs-pe/pivotal-tracker/commits/development
    - https://github.com/emacs-pe/pivotal-tracker/commit/de40f942aed936c594d1512d8f4ac5eebb0f2bd1
    - https://github.com/shajith/pivotal-tracker/commit/553da679b7b40f80f4e48586563219c10f41e731
    - https://github.com/emacsfodder/pivotal-tracker/tree/master
    - https://github.com/zph/pivotal-tracker/commits/master
** write org-walker, org-to-pt
   - based on https://github.com/xiaoxinghu/orgajs/, https://unifiedjs.github.io/
   - https://github.com/org-pivotal/org-pivotal
* TODO Pivotal tracker: search tickets
  - link org headline to ticket
* TODO want to see what is ACTIVE and what was recently DONE
* TODO org-babel, particularly with sql
  - limitations:
    - it runs the entire code block (is there a way to run only a region?) so
      need to use multiple code blocks
    - blocks on query, so if it's slow, emacs is frozen
    - puts results in file, not good for large results sets (though you can tell
      it how to handle them)
  - [ ] sqlparse-region in defuns.el, maybe add a hook to run this on M-q for sql-mode
  - https://orgmode.org/worg/org-contrib/babel/intro.html#source-code-blocks
  - https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sql.html
  - https://www.emacswiki.org/emacs/SqlMode
  - [ ] try this backend: https://github.com/nikclayton/ob-sql-mode
** org-babel with shell/bash
   - describe-variable org-babel-shell-names
* TODO use agenda
* TODO set dates
* TODO use archiving
* TODO share over dropbox
* TODO mobileorg or beorg
* USE export dispatcher
  - C-c C-e
  - insert options: C-c C-e #
  - C-c e for org-slack-export-to-clipboard-as-slack



* sqli
* TODO try http://john.mercouris.online/emacs-database-interface.html


* js
* DONE emacs flycheck does not like import syntax in jsx files in neodarwin componenents
   - tried symlinking to eslintrc file in /dev, then flycheck just wouldn't load
     config file -- why? -> because needed .js extension -- it's not json
* DONE prettier-js-mode is enabled if prettier is available
* What do I currently have
   - coffee-mode
   - discover-js2-refactor
   - flycheck
   - js2-mode
   - js-comint
   - js-doc
   - js2-highlight-vars
     - this uses a timer and it still runs after switching buffers, which causes
       error. annoying!
   - js2-refactor
   - json-mode
   - json-reformat
   - json-snatcher
   - nvm
   - rjsx
   - web-mode
*** Deleted because don't use
    - ac-js2 (don't use)
    - skewer-mode (don't use)
*** not installed but consider
   - https://github.com/NicolasPetton/xref-js2
   - indium
   - js3-mode?
   - prettier-mode
* DONE Get flycheck working reliably
   CLOSED: [2017-07-29 Sat 22:02]
   - https://github.com/magnars/.emacs.d/blob/master/settings/setup-flycheck.el
   - helpful: flycheck-verify-setup
   - have flycheck do syntax checking and run prettier
   - different eslint parsers/envs/configs/settings per project :(
     - awshotornot: next/babel/react/etc.
     - neodarwin/atalanta/sd-spelling/etc: settle on prettier
     - solution for eslint version: code that finds local eslint.js executable,
       aware of node_modules
     - solution for config files: use flycheck-verify-setup to make sure it is
       finding them right config file(s)
* DONE tern / ac-js2 / skewer
   CLOSED: [2018-01-17 Wed 09:40]
   - https://emacs.stackexchange.com/questions/17265/cannot-jump-to-definition-in-js2-mode-or-tern
* DONE use rjsx instead of js2-mode by default?
   CLOSED: [2018-01-17 Wed 09:40]
   - or only for .jsx files?
* DONE prettier-mode
   CLOSED: [2018-01-17 Wed 09:40]
* INACTIVE js3-mode https://github.com/thomblake/js3-mode
   - don't need the stuff it offers anymore
* DONE Make it.only / unonly work in js2-mode
  CLOSED: [2018-01-25 Thu 16:12]
* DONE toggle-only: only/unonly for it, test, context, describe
  CLOSED: [2018-01-25 Thu 16:46]
  - similar to toggle-boolean: when point is on line, add/remove .only
* DONE js-comint https://github.com/redguardtoo/js-comint
  CLOSED: [2018-01-25 Thu 16:46]
   - run-js, js-send-buffer
* DONE Various
  CLOSED: [2018-03-01 Thu 09:08]
  - [-] emacs js2 setup
    - [X] upgrade js2-refactor
    - [X] use const in snippets
    - [X] sane eslint
      - it only uses ~/.eslintrc if it doesn't find one higher up.
      - helpful: http://eslint.org/docs/user-guide/configuring#configuration-cascading-and-hierarchy
      - .eslintrc.js or .eslintrc.json
      - $ eslint --print-config test/cache.js
    - [X] sd-simulator automatic prettier / emacs prettier
      - https://github.com/prettier/prettier-emacs
    - [ ] get to know js2-refactorings and mnemonics
    - [ ] make js2 snappier
* DONE flycheck bug
  - https://github.com/flycheck/flycheck/issues/1311
* DONE wjb-kill-node in defuns
  CLOSED: [2018-09-01 Sat 22:17]
* INACTIVE node-inspector plus tern/swank or something to inspect running node process in emacs
   - http://enthusiasm.cozy.org/archives/2014/04/emacs-node-javascript-oh-my
   - https://github.com/jscheid/kite/blob/master/kite.md
   - https://github.com/segv/jss
   - open /Applications/Google\ Chrome.app --remote-debugging-port=9222
* TODO IDE features
** DONE tern
   CLOSED: [2018-02-14 Wed 15:41]
    - [X] tern and company
      - https://emacs.cafe/emacs/javascript/setup/2017/05/09/emacs-setup-javascript-2.html
** DONE xref-js2
   CLOSED: [2018-02-14 Wed 15:41]
    - but I don't want xref-goto-xref to open in a new buffer!
** TODO tide
   CLOSED: [2018-06-13 Wed 21:45]
   - https://github.com/ananthakumaran/tide
** TODO lsp-javascript
   - https://github.com/emacs-lsp/lsp-mode
   - https://github.com/emacs-lsp/lsp-javascript
   - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html
   - https://code.visualstudio.com/docs/languages/jsconfig
   - does it find types installed globally?
   - does it work with require?
   - [ ] function docstrings - p2
   - [ ] method signatures - p2
   - [ ] types
   - [ ] autosuggest imports - p2
   - [ ] show type info for company suggestion candidates - p1
   - [ ] no animation when making a new
*** sd-playground
   - types
#+BEGIN_SRC
@types/bluebird@3.5.0
@types/body-parser@1.18.2
@types/config@1.26.2
@types/cors@^2.8.4
@types/express@4.15.4
@types/express-statsd@0.3.0
@types/lodash@4.17.4
@types/mysql2@1.4.1
@types/node-statsd@0.1.1
@types/pn-logging@^4.0.0
@types/request@2.83.0
@types/sequelize@^4.37.1

#+END_SRC
*** neodarwin
   - types
#+BEGIN_SRC
react
react-dom
react-redux
#+END_SRC
   - initial attempt at neodarwin root
#+BEGIN_SRC json
{
  "compilerOptions": {
    "target": "es2017",
    "allowSyntheticDefaultImports": true,
    "noEmit": true,
    "checkJs": true,
    "lib": [ "dom", "es2017" ],
    "jsx": "react",
    "paths": {
      "components/*": ["./src/components/*"]
    }
  },
  "exclude": ["local_notes", "dist", "public"]
}

#+END_SRC
** langservers
   - https://github.com/sourcegraph/javascript-typescript-langserver
   - https://github.com/theia-ide/typescript-language-server (lighter weight? faster)
   - comparison: https://github.com/eclipse/wildwebdeveloper/issues/22
   - this one uses tern: https://github.com/tbodt/js-langserver
** lsp eglot
  - fs. should complete using lsp, NOT company
  - eglot uses capf
  - want a different min prefix for modes where this applies?
  - summary:
    - eglot uses company-capf
    - . is an lsp trigger character so even when company min length is set, it
      will trigger
    - types need to be installed per repo to be found by the language server
      (seems to apply to both sourcegraph and theia)
    - the language server seems to have variou problems with jsconfig.json,
    - so even when @types/node is installed locally, fs. does not complete as
      i'd like
    - company-quickhelp and pos-tip don't seem to working (unrelated to lsp)
    - would like langserver support for jsx, but it doesn't seem like this
      exists, so dont hook eglot for jsx files. BUT actually, see
      https://www.reddit.com/r/emacs/comments/b9oxbm/lspmode_javascript/ek6d8w5/
      - "I'm using typescript-language-server: (add-to-list
        'eglot-server-programs '(web-mode . ("typescript-language-server"
        "--stdio"))) It supports completions and goto definition, even when
        using imports in a jsx file. Eglot doesn't have all the bells and
        whistles of lsp-ui, which I like. "
** DONE dumb-jump
   CLOSED: [2018-09-01 Sat 22:17]
   - dumb-jump-go C-M-g
** DONE smart-jump
   CLOSED: [2019-03-08 Fri 11:06]
** DONE find-file-at-point for imports in js and jsx files
   CLOSED: [2019-03-08 Fri 11:06]
  - support "index" by default
  - C-c p g project-find-file-dwim does a pretty good job of this
  - counsel has
* TODO how to handle flycheck messages
  - POS tip repo seems unmaintained, doesn't work that well: https://github.com/flycheck/flycheck-pos-tip/issues
  - two different flycheck-inlines, though they seem to have merged: https://github.com/stardiviner/flycheck-inline/issues/4
* TODO indium
* TODO refactor setup-js2-mode.el, move into use-package
* TODO Javascript setup
  - https://www.reddit.com/r/emacs/comments/6ownl0/emacs_as_javascript_ide_in_2017_which_tools_do/


* coffee
* TODO coffee-mode
** DONE Coffee repl
   CLOSED: [2014-04-13 Sun 18:12]
** TODO coffee-mode coffee-dedent-line-backspace-ignore-blank that does nothing on blank lines

   - useful for set-rectangular-region-anchor

** TODO coffee compile
** TODO fix yasnippet smart-tab coffee-mode
   - after expanding a snippet, I don't want to indent
   - yas-expand -> yas-expand-from-trigger-key
   - smart-tab
   - minor modes: smart-tab and yas


* dirtree
* TODO use side window
  - https://www.gnu.org/software/emacs/draft/manual/html_node/elisp/Displaying-Buffers-in-Side-Windows.html#Displaying-Buffers-in-Side-Windows
* TODO dirtree: rearrange trees
  - Or replace dirtree.
  - Would be nice to have one modeline
  - http://stackoverflow.com/questions/843645/a-good-project-tree-browser-for-emacs/26705877
  - Better project tree browser
  - http://www.emacswiki.org/emacs/sr-speedbar.el, speedbar
  - https://www.emacswiki.org/emacs/TreeMode
* TODO dirtree: improve icons
  - they use Emacs widgets, which specify a glyph, which is set to an XPM icon.
  - path to icons: /usr/local/Cellar/emacs-mac/emacs-25.2-z-mac-6.4/share/emacs/25.2/etc/images/tree-widget/folder/close.xpm
  - some nice ones I could use instead: http://www.iconarchive.com/show/flat-folder-icons-by-pelfusion.html
  - or this: https://github.com/sebastiencs/icons-in-terminal
  - download new icons I want to use
  - resize them and convert to XPM using imagemagick.
  - looks like the current ones are 16x22, left-justified, the actual images are
    somewhat smaller.
** replace existing XPMs with nicer ones
* TODO possible dirtree replacement?
  - https://github.com/sebastiencs/sidebar.el



* python
* TODO python in emacs
** python-mode
  - https://github.com/fgallina/python.el is the stock python-mode in Emacs >= 24.3
  - [ ] bind Enter to newline-and-indent
  - [ ] jedi: http://tkf.github.io/emacs-jedi/latest/
  - https://github.com/jhamrick/emacs/blob/master/.emacs.d/settings/python-settings.el
  - http://wikemacs.org/index.php/Python
  - https://github.com/tkf/emacs-python-environment vs the venv thing I have installed
** ipython
  - http://stackoverflow.com/questions/17817019/how-to-open-ipython-interpreter-in-emacs
  - http://stackoverflow.com/questions/14284170/emacs-how-to-configure-emacs-for-ipython-pylint-and-autocompletion-support
  - http://www.emacswiki.org/emacs/PythonProgrammingInEmacs
  - [ ] put activated venv in buffer name when call run-python and venv is active
  - [ ] fix ^A in prompts
  - readline-complete? https://github.com/monsanto/readline-complete.el/blob/master/readline-complete.el
  - ipython.el?
  - elpy?
** django
   - https://code.djangoproject.com/wiki/Emacs
   -


** elpy
** venv/pyenv
  - pyvenv-workon -- from pyvenv lib. elpy uses this. workon is an alias for
    this.
  - venv-workon -- from virtualenvwrapper lib. but running this seems to be
    needed for pylint to work?


* pairing/paredit
* TODO maybe try https://github.com/capitaomorte/autopair
* DONE smart-parens
  CLOSED: [2015-07-10 Fri 17:00]
  - It's "grander" than paredit-everywhere.
  - Don't use it with electric-pair-mode, which may now be on by default, so
    disable it.
  - Docs are on the wiki: https://github.com/Fuco1/smartparens/wiki
  - use kill-sexp, forward-sexp, backward-sexp, up-sexp, down-sexp.
  - Use C-- to do backwards version of forwards command.
  - In coffee-mode, don't indent-region after sp-kill-sexp (or other commands). How?

* TODO paredit - use advice to push mark

* shell/comint
* TODO Shell in Emacs
  - See: http://snarfed.org/why_i_run_shells_inside_emacs
  - ansi-term vs shell vs eshell vs terminal-emulator vs. comint vs.
    vs. compilation-mode
* setenv / getenv / process-environment
  - See https://www.gnu.org/software/emacs/manual/html_node/elisp/System-Environment.html
  - dir local env vars: https://emacs.stackexchange.com/q/35964/2163
* ansi-term
  - actually using sane-term
  - line mode = C-c C-j
  - char mode = C-c C-k
  - fully supports ncurses-style applications, jest in ansi-term works fine
  - process.env.TERM = eterm-color
    - [ ] does jest support eterm-color? it's not dumb
  - turn on compilation-shell-minor-mode: https://superuser.com/a/1416462/93702
    - I tried this with jest --watch, but my input doesn't do anything. Probably
      was in line mode. Switch to char mode with C-c C-k. In char mode, jest
      --watch works!
    - problems with ansi-term:
      - char-mode to send commands, line-mode to navigate in buffer
      - next-error and prev-error aren't working even in line-mode
      - next-error and prev-error aren't bound to M-n and M-p (term-mode
        bindings are taking over)
* comint-mode
  - comint-mode: Major mode for interacting with an inferior interpreter.
  - js-comint-mode: Major mode derived from comint-mode by define-derived-mode.
  - shell-mode is derived from comint-mode
  - comint-mode has input and output filter functions
* shell-mode
  - (define-derived-mode shell-mode comint-mode "Shell"
* compilation-mode
  - Major mode for compilation log buffers.
  - compile command starts it. If optional second arg COMINT is t the buffer will be in Comint mode with
`compilation-shell-minor-mode'.
  - When Compilation Shell minor mode is enabled, all the error-parsing commands
    of the Compilation major mode are available but bound to keys that don't
    collide with Shell mode. See compilation-mode.
  - there's also compilation-minor-mode
  - [ ] is compilation-shell-minor-mode derived from shell-mode? or if not, then
    from what? maybe minor modes aren't derived from modes...
  - [ ] what TERMs does compilation-shell-minor-mode support?
    - assume same as comint-mode? comint-mode is generic, it probably doesn't
      support any itself.
    - assume same as shell-mode?
  - [ ] does shell-mode support sufficient ansi/term escape codes to support
    jest --watch?
  - [X] how can I set TERM to something other than dumb when I run compile in
    comint mode? -> set comint-terminfo-terminal
  - M-x compile is compilation-mode. C-u M-x compile is comint-mode with
    compilation-shell-minor-mode. When jest is watching, I can type, but nothing
    happens. Why not?
  - comint-use-prompt-regexp: this is buffer-local. If non-nil, use 'comint-prompt-regexp' to recognize prompts.
If nil, then program output and user-input are given different 'field'
properties, which Emacs commands can use to distinguish them (in
particular, common movement commands such as 'beginning-of-line'
respect field boundaries in a natural way).
> process.stdout.isTTY
true
> process.env.TERM
'dumb'
>
* projectile command
  - projectile-run-compilation runs compile without the comint arg!
  - [ ] check whether there's an issue for this
* jest-mode
  - jest mode defined in 'jest.el': Major mode for jest sessions (derived from comint-mode).
  - [X] to set defaults in magit-popup: C-t to show magit-popup common commands, set
    the values, then C-x C-s
** how it works
  - jest-mode uses comint-mode
  - I'm hooking it to use compilation-minor-mode
  - in compilation mode, the endless defuns will work IF bound to the keys,
    because they send to the process.
  - In compilation-minor-mode, they seem not to work, maybe because the process
    is lost? Not sure. One theory is the keypresses ARE getting to jest, but the
    output of the actions they cause is surpressed for some reason...
  - need to understand when a process is bound to a buffer/not bound -- because
    it seems to need to send directly to the process, which the endless defuns
    do, my guess is because jest prompt is doing something strange/unusual with
    the way it is reading input
** TODO want a different set of settings for jest watch than for other comint/compilation buffers
   - to handle the prompt
   - [ ] do the endless send-key bindings
   - [ ] what to use for output filters??
   - try:
   #+begin_src
compilation-scroll-output nil ;; ??
comint-terminfo-terminal "ansi"
comint-scroll-show-maximum-output nil ;; ??

   #+end_src
** examples of unsupported ansi codes
   #+begin_src
   Test Suites: 0 of 12 total
Tests:       0 total
Snapshots:   0 total
[1A
[0m[7m[33m RUNS  ...
 RUNS  ...
 RUNS  ...

   #+end_src>

** TODO minor mode jest-minor-mode
   - where compile, recompile, projectile-compile are remapped to jest-popup, etc.
   - then activate it in dir-locals
* jest in compilation-mode
  - https://jestjs.io/docs/en/cli.html#colors
** DONE is --testLocationInResults doing anything?
   CLOSED: [2018-10-08 Mon 11:46]
   - seems like I'm just getting the line number from the Error stack traces
** TODO support jest watch prompt (for watching)
*** jest watcher being interactive and using full ansi codes is coupled; this is a problem b/c comint/compilation support only color codes (not movement/screen clearing)
    - so I can only get interactivity if I also get janky output b/c it's not
      really clearing the screen
    - [ ] should I add process.env.INSIDE_EMACS to isInteractive? -> doesn't
      matter, that will make isInteractive true which is going to cause it to
      use movement/clear codes that Emacs doesn't support :(
    - isInteractive:
      https://github.com/facebook/jest/blob/f57e2887357d7f19f398cac8fb25f1b0835467e7/packages/jest-util/src/isInteractive.ts
 // isTTY true and TERM != dumb
 export default !!process.stdout.isTTY && process.env.TERM !== 'dumb' && !isCI;
    - could change to this in order to be interactive with colors inside emacs
      where ansi movements codes are not really supported:
 export default !!process.stdout.isTTY && (process.env.TERM !== 'dumb' || process.env.INSIDE_EMACS) && !isCI;
    - clearLine: https://github.com/facebook/jest/blob/b4897796bcbcb972234ef699b3e9e0f6b8724132/packages/jest-util/src/clearLine.ts
    #+begin_src js
    export default (stream: NodeJS.WritableStream) => {
   if (process.stdout.isTTY) {
     stream.write('\x1b[999D\x1b[K');
   }
 };
    #+end_src
*** jest prompt
    - jest-core/src/watch
    #+begin_src js
      const onCancelPatternPrompt = () => {
    outputStream.write(ansiEscapes.cursorHide);
    outputStream.write(specialChars.CLEAR);
    outputStream.write(usage(globalConfig, watchPlugins));
    outputStream.write(ansiEscapes.cursorShow);
  };

  if (typeof stdin.setRawMode === 'function') {
    stdin.setRawMode(true);
    stdin.resume();
    stdin.setEncoding('utf8');
    stdin.on('data', onKeypress);
  }

    #+end_src
** TODO leverage jest patterns cli args (eg, related to recent changes)
   - -t to match test name
   - couple this with defuns to run only a certain test name, akin to only
   - go back to marker strategy I used to use with mocha and coffee-script: put
     XXX in the test name, then use -t flag
** TODO leverage debugger / integrate with indium?

* projects in compilation-mode
** DONE set compile-command in each repo .dir-locals.el yet still persist changes to it within a session
   CLOSED: [2018-10-08 Mon 11:47]
   - well, it is becoming file-local
   - but then i get the original one when i run tests from magit status buffer,
     or from a newly opened buffer in the project
   - make initial-compile-command that is in .dir-locals.el?
   - when are dir-locals evaluated?
** TODO multi-compile to run tests and linting
   - https://github.com/ReanGD/emacs-multi-compile
*** include linting/style checks
** TODO name compilation buffer sensibly -- bind compilation buffer to project
   - *compilation-<project>*
   - automatically clear buffer after a certain number of lines
#+BEGIN_SRC emacs-lisp
(defun my-make-room-for-new-compilation-buffer ()
  "Renames existing *compilation* buffer to something unique so
      that a new compilation job can be run."
  (interactive)
  (let ((cbuf (get-buffer "*compilation*"))
        (more-cbufs t)
        (n 1)
        (new-cbuf-name ""))
    (when cbuf
      (while more-cbufs
        (setq new-cbuf-name (format "*compilation%d*" n))
        (setq n (1+ n))
        (setq more-cbufs (get-buffer new-cbuf-name)))
      (with-current-buffer cbuf
        (rename-buffer new-cbuf-name)))))
#+END_SRC
* display in compilation-mode (compile)
** filter out escape sequences that aren't color codes
   - if needed: https://emacs.stackexchange.com/a/38531/2163
** perf: shorten comint lines
   - some ideas: https://www.reddit.com/r/emacs/comments/3scsak/incredibly_slow_comint_eg_shell_compile_output_on/
   - would this help in compilation mode? how to use it?
   - TODO: figure out the various comint filters, compilation filters, and
     compilation hooks
     - this suggests comint-output-filter-functions is a hook variable,
       equivalent for comint to compilation mode's compilation-filter-hook:
       https://emacs.stackexchange.com/a/38531/2163 So does
       comint-output-filter-functions get run during compilation-mode?
 #+BEGIN_SRC
   (defvar wjb/comint-long-line-regexp "\\(.\\{75\\}[;,: ]\\)")
   (defun wjb/comint-shorten-long-lines (text)
     (let* ((shortened-text (replace-regexp-in-string wjb/comint-long-line-regexp "\\1\n" text)))
       (shortened-text)))
   ;; (if (string= shortened-text text)
   ;;     text
   ;;   shortened-text)))

   ;; but does compilation-mode use comint-preoutput-filter-functions??
   ;; there is a compilation-filter-hook, can I add this to it?
   (add-hook 'comint-preoutput-filter-functions 'wjb/comint-shorten-long-lines)


 #+END_SRC

* DONE node/js stack traces in compilation-mode
  - https://www.emacswiki.org/emacs/CreatingYourOwnCompileErrorRegexp
  - https://benhollis.net/blog/2015/12/20/nodejs-stack-traces-in-emacs-compilation-mode/
** TODO fix face -- stop using underlining
   - see https://emacs.stackexchange.com/a/15219/2163
   - basically, adjust the regex match to change what is considered the
     hyperlink (which is underlined)


* projectile
* TODO make projectile-find-test-file work
  - projectile-find-test-file -> projectile-toggle-between-implementation-and-test
  - per-project test prefix and suffix, but that's assuming a.jsx is tested with
    test-a.jsx or a.spec
    - in Neodarwin components test-suffix is really just test.jsx
    - in other projects, I want it to go to the test directory, find the
      matching path, find the matching filename
  - [ ] will it walk around directories?
  - [ ] if I find a test file manually, will it remember it?
** custom :related-files-fn



* perspective or persp-mode
  - intention is to be limited to project-related buffers
  - want to keep using tmux to own shells so that quitting Emacs doesn't kill
    servers and watches. tmunx runs in vterm.
  - needs to support main repo and 0+ worktrees
  - needs to account for local_notes
  - need to be able to add/remove/change which project(s) a buffer belongs to
  - for this to work, project-switching would need to be fast and easy. Maybe
    make a hydra?
    - start -> choose project -> choose buffer
  - top-level shared buffers (belong to all projects)
    - bunch of org: standup.org, today.org,
    - clock.org
  - top-level buffers (belong to no projects)
    - default for anything not otherwise specified
    - personnel notes
  - project buffers
    - magit
    - .org
    - .rest
    - tmux session - vterm - *tmux-neodarwin*
      - server
      - build
      - test (maybe replaced by jest in compile buffer)
      - storybook
    - test - compile
  - project-create buffers
    - run a shell
    - create a new file
    -


* appearance
* review/useful
  - https://writequit.org/eos/eos-appearance.html
  - https://emacs.stackexchange.com/questions/24630/is-there-a-way-to-change-color-of-active-windows-fringe
* modeline
  - don't want display-time on laptop screen
* margins
  - margins are 0 by default
  #+begin_src emacs-lisp
 (setq-default left-margin-width 10 right-margin-width 8) ; Define new widths.
 (set-window-margins nil 0 0)

 ;; third argument is keep-margins
 (set-window-buffer nil (current-buffer)) ; Use them now.
  #+end_src
* fringes
  - a window has fringes
  - indicate-empty-lines
  - dirtree has no fringes (set-window-fringes window 0 0 nil)
fringe-styles -- variable of known styles
? -- fringe for a particular window -- probably a parameter
fringe-mode -- set default for all frames
set-fringe-style -- set default for one frame
set-window-fringes -- set for a window, all has outside-margins argument
  #+begin_quote
If optional fourth arg OUTSIDE-MARGINS is non-nil, draw the fringes
outside of the display margins.  By default, fringes are drawn between
display marginal areas and the text area.
  #+end_quote
* TODO initial frame
  - https://www.reddit.com/r/emacs/comments/7s52iz/initialframealist_and_x_resources_on_mac/
    suggests using defaults like so, but I haven't yet determined whether this
    works with emacs-mac or just the official macOS emacs. I do see
    org.gnu.Emacs in the strings from the emacs binary.
#+begin_src bash
# here's what I see now:
$ defaults read org.gnu.Emacs
{
    ApplePressAndHoldEnabled = NO;
    NSAppSleepDisabled = 1;
    RawCameraSupportVersion = 7040;
}


defaults write org.gnu.Emacs Width 120
defaults write org.gnu.Emacs Height 40
defaults write org.gnu.Emacs Top 40
defaults write org.gnu.Emacs Left 200

#+end_src
  - discussion for emacs-mac specifically:
    https://github.com/railwaycat/homebrew-emacsmacport/issues/127
#+begin_src emacs-lisp
;; get all frame parameters:
(frame-parameters)

;; get a frame parameter:
(frame-parameter nil 'height) ;; 72

;; set a parameter
(set-frame-parameter nil 'width 120)
(set-frame-parameter nil 'height 40)
(set-frame-parameter nil 'fullscreen fs)
#+end_src
* TODO nice fringes
* TODO centered modeline that matches fringes
* TODO per-frame settings
** main frame
** olivetti frame
** split-horizontally frame?





* vterm for tmux
  - [ ] why doesn't the tmux status line appear?
  - [ ] resizing the pane (maximizing)
* TODO watch mode
  - what movement terminal codes would comint need to support in order to work
    with jest watch mode?


* TODO purpose-mode
  - https://github.com/bmag/emacs-purpose/wiki/Purpose-Configuration
  - for each repo, be able to jump to each of these:
    - compilation buffer
    - .rest file, http output
    - magit status buffer
    - root dired
    - .org file
    - README?
* TODO try eyebrowse
* TODO fill/auto-fill/visual-line/line wrapping
  - two modes
** writing emails, for posts
  - when writing emails etc, I don't want hard line breaks
  - *a* way to achieve that is: set fill-column to 10000, turn on visual-line-mode
  - olivetti
  - no or thin fringe
** writing docs, markdown, code
   - want hard line break at 80 columns
   - set fill-column 80
   - turn on auto-fill-mode
   - turn off visual-line-mode
* writeroom frame/olivetti frame
* TODO how to do olivetti-mode like appearance for an entire frame? frame-locals? frame-hook?


* grep
* TODO ripgrep https://github.com/dajva/rg.el
  - works well with unicode
  - try helm-ag but with ripgrep as the command instead of ag https://github.com/syohex/emacs-helm-ag
  - main things I like about my current grep
    - -C 5 context lines
    - ignores the right patterns (directories and files)
* TODO figure out how to use dired-grep dired-find commands without overwriting grep settings
  - grep-find vs rgrep vs find-in-project
  - find-in-project is grep-find with find-args
  - find-args is my default find arguments
  - default-find-cmd is set to be (find . find-args) by maybe it gets changed
  - do I need to run grep-compute-defaults at all? What does it do?
  - META-! find . -name "models.py" | xargs grep -niEH -C 5
  - maybe the solution is to use a project mode that will search automatically.
* DONE grep through all open org buffers
  - multi-occur-in-matching-buffers. regex is \\*.org C-0 C-c 0 C-c C-0
  - occur-rename-buffer / "r" in results buffer
* DONE grep through open org-mode buffers
  - multi-occur-in-mode-string
  - multi-occur-in-this-mode
* DONE grep through *.org files in a directory
  CLOSED: [2018-09-01 Sat 22:15]
  - recursive through subdirs
  - search within any files that match glob or regex
  - another example: grep through all package.json files in node_modules
  - another example: grep through all test.jsx files in components
  - maybe something based on this, from
    https://www.emacswiki.org/emacs/RecursiveGrep Except that these are about
    running dired on files, not grepping through them. I want to find based on a
    name pattern, then grep within those files for a different pattern, and see
    the output of that grep in a compile buffer.
#+BEGIN_SRC emacs-lisp
 (defvar grep-and-find-map (make-sparse-keymap))
 (define-key global-map "\C-xf" grep-and-find-map)
 (define-key global-map "\C-xfg" 'find-grep-dired) ;; Find files in DIR matching a regexp REGEXP and start Dired on output.
 (define-key global-map "\C-xff" 'find-name-dired) ;; Search DIR recursively for files matching the globbing pattern PATTERN, and run Dired on those files.
 (define-key global-map "\C-xfl" (lambda (dir pattern)
        (interactive "DFind-name locate-style (directory):
                     \nsFind-name locate-style (filename wildcard): ")
        (find-dired dir (concat "-name '*" pattern "*'"))))
 (define-key global-map "\C-xg" 'grep)
#+END_SRC
  - [X] find-in-project-name-glob


* navigation
* DONE Try anything and/or Helm
** TODO for helm, sometimes do want popup windows
   - [ ] helpful?: https://www.reddit.com/r/emacs/comments/7rho4f/now_you_can_use_helm_with_frames_instead_of/?ref=share&ref_source=link
   - [ ] one key to make helm full window: https://emacs.stackexchange.com/a/650/2163


* magit
** variables
 magit-branch-prefer-remote-upstream
 magit-remote-add-set-remote.pushDefault
 magit-auto-revert-mode
** worktrees
   - worktrees would work best as /scm/sd/neodarwin/primary, /scm/sd/neodarwin/other
     - because .dir-locals.el and similar could exist at /scm/sd/neodarwin
     - would switching to this break anything?
   - new worktree:
     - prefix with repo-name
     - copy .dir-locals.el
     - symlink local_notes
     - yarn, because node_modules is not checked in
     - local-development.js
#+BEGIN_SRC sh
# Run from inside primary tree. Assumes worktree is ../
REPO=$(basename "$PWD")
WORKTREE="$REPO-worktree"
DEST="../$WORKTREE"
echo Setting up worktree "$WORKTREE" in "$DEST"...
cp .dir-locals.el jsconfig.json "$DEST"
cp config/local* "$DEST/config/"
ln -s "~/notes/$REPO.org" local_notes
#+END_SRC

** cherry picking
   - https://magit.vc/manual/magit/Cherry-Picking.html
   - magit-cherry-spinoff -- useful when conflicts; spinoff commits onto a new branch


* markdown
* DONE GFM tables
  CLOSED: [2015-09-11 Fri 16:09]
  - http://emacs.stackexchange.com/a/5319/2163
  - http://stackoverflow.com/a/20912535/599258



* macOS
* How to build emacs-mac
  - see ~/dotfiles/dev/bin/emacs-mac-install
* Try NS port
  - but don't want links to overwrite Mac-port
  - brew install emacs --with-cocoa && brew unlink emacs && brew link emacs-mac
  -

* disable app nap
  - defaults write org.gnu.Emacs NSAppSleepDisabled -bool YES
  - from https://github.com/rejeep/prodigy.el



* other
* INACTIVE magithub / gh package
  - https://github.com/vermiculus/magithub/blob/master/README.md
* INACTIVE browse-at-remote / magit b y pushRemote problem
  - https://github.com/magit/magit/issues/3417
  - fix is replace remote and pushRemote = spanishdict with = origin in .git/config
* INACTIVE phi-search
  - [ ] phi-search: during searches, C-a, C-e, M-m should work
* INACTIVE profiling running commands with smex
#+BEGIN_QUOTE
ad-Advice-ido-read-internal is a compiled Lisp function.

(ad-Advice-ido-read-internal AD--ADDOIT-FUNCTION ITEM PROMPT HIST &optional
DEFAULT REQUIRE-MATCH INITIAL)

Before-advice 'flx-ido-reset':
Clear flx narrowed hash beforehand.
#+END_QUOTE
* INACTIVE Switch from smex to amx
  - https://github.com/DarwinAwardWinner/amx
* INACTIVE ido-switch-buffer qualified with org-mode only
  - want to choose among only org-mode buffers
  - possibly helpful: https://stackoverflow.com/questions/22808844/emacs-switch-buffer-per-window
  - https://www.reddit.com/r/emacs/comments/8e8bhv/how_do_you_manage_and_switch_between_multiple/
#+BEGIN_QUOTE
ido-switch-buffer is an interactive autoloaded compiled Lisp function in
'ido.el'.

It is bound to C-x b, <menu-bar> <buffer> <select-named-buffer>.

(ido-switch-buffer)

Switch to another buffer.
The buffer is displayed according to 'ido-default-buffer-method' -- the
default is to show it in the same window, unless it is already visible
in another frame.

As you type in a string, all of the buffers matching the string are
displayed if substring-matching is used (default).  Look at
'ido-enable-prefix' and 'ido-toggle-prefix'.  When you have found the
buffer you want, it can then be selected.  As you type, most keys have
their normal keybindings, except for the following:

RET	Select the buffer at the front of the list of matches.
	If the list is empty, possibly prompt to create new buffer.

C-j	Use the current input string verbatim.

C-s	Put the first element at the end of the list.
C-r	Put the last element at the start of the list.
TAB	Complete a common suffix to the current string that matches
	all buffers.  If there is only one match, select that buffer.
	If there is no common suffix, show a list of all matching buffers
	in a separate window.
C-e	Edit input string.
C-x C-b	Fallback to non-ido version of current command.
C-t	Toggle regexp searching.
C-p	Toggle between substring and prefix matching.
C-c	Toggle case-sensitive searching of buffer names.
?	Show list of matching buffers in separate window.
C-x C-f	Drop into 'ido-find-file'.
C-k	Kill buffer at head of buffer list.
C-a	Toggle ignoring buffers listed in 'ido-ignore-buffers'.
#+END_QUOTE
* DONE tsv-mode
  - https://www.emacswiki.org/emacs/tsv-mode.el
* DONE bash command to open current directory
  CLOSED: [2018-06-03 Sun 22:31]
  - [X] in dired -- dired
  - [X] add to dirtree -- dirtree
  - implemented as functions in bashrc
* DONE diminish auto-fill-mode
  - https://www.wisdomandwonder.com/link/10214/httpsgithub-commagnars-emacs-dblobmastersite-lispdiminish-ell87wh
  - https://github.com/magnars/.emacs.d/blob/master/site-lisp/diminish.el#L87y-you-cant-diminish-auto-fill-mode
* TODO powerline
  - need to figure out how not to show the entire git branch name in modeline.
    or truncate it at n characters.
* TODO elfeed http://nullprogram.com/blog/2013/09/04/
* TODO Edit with Emacs OS X service
  - https://react-hn.appspot.com/#/story/16395379?_k=v1k1cm
* TODO fewer popup windows
  - maybe due to `switch-to-buffer-preserve-window-point`, see https://github.com/emacs-mirror/emacs/blob/emacs-26/etc/NEWS  -
* How to improve performance of buffers with very long lines
** https://emacs.stackexchange.com/a/603/2163
  - break input file into lines:
#+BEGIN_SRC
# Using python
$ < infile.json python -c 'import json, sys ; json.dump(json.load(sys.stdin), sys.stdout, indent=2)

# Bash
$ < infile fold -s
#+END_SRC
  - interesting ideas: https://emacs.stackexchange.com/a/8152/2163
** DONE View Large Files https://github.com/m00natic/vlfi
** DONE OverLongLineMode
* elisp-demos
  - https://github.com/xuchunyang/elisp-demos/blob/master/elisp-demos.org
* open in new window
I think that the problem has to do with dirtree window being dedicated.

I want inhibit-same-window to always be nil when display-buffer is called from
dirtree-mode.
* TODO packages to remove?
  - find-file-in-project
  - smart-mode-line
  - rainbow-delimiters
  - mac-pseudo-daemon
  - typescript-mode
** gone
  - smartparens
  - smart-jump
  - skewer-mode
  - tern
  - company-tern
* TODO use auth-sources                                   :authinfo:security:
** DONE .authinfo.gpg
   - checked in crypttext
** TODO hook up auth-sources to macOS keychain
   - (it's already hooked up to gpg keychain)
   - https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources
   - https://emacs.stackexchange.com/questions/3869/mac-os-keychain-with-smtp-email-password#3872
   - https://lists.gnu.org/archive/html/bug-gnu-emacs/2014-11/msg00805.html
   - https://lists.gnu.org/archive/html/help-gnu-emacs/2014-11/msg00543.html
   - https://www.gnu.org/software/emacs/manual/html_mono/auth.html
 #+BEGIN_SRC emacs-lisp
 ;; test it
 (push 'macos-keychain-internet auth-sources)
 (push 'macos-keychain-generic auth-sources)
 (message (format "%s" (auth-source-search :label "github api token")))

 (message (format "%s" (auth-source-search :server "api.github.com")))

 ;; reset
 (setq auth-sources '("~/.authinfo" "~/.authinfo.gpg" "~/.netrc"))
 #+END_SRC
** DONE problem
'epa-file' already enabled
Decrypting /Users/william/.authinfo.gpg...done
epa-file-insert-file-contents: Opening input file: Decryption failed,
Decrypting /Users/william/.authinfo.gpg...done
epa-file--find-file-not-found-function: Opening input file: Decryption failed,

I think the problem is that a bad password is stored in gpg-agent, which is part
of GPGTools. (this turned out not to be right; see below)

See
https://unix.stackexchange.com/questions/71135/how-can-i-find-out-what-keys-gpg-agent-has-cached-like-how-ssh-add-l-shows-yo/342461#342461
and https://demu.red/blog/2016/06/how-to-check-if-your-gpg-key-is-in-cache/

I can see that my gpg key passphrases are in gpg-agent:
#+BEGIN_SRC
/usr/local $ gpg --fingerprint --with-keygrip william.bert@gmail.com
pub   rsa2048 2013-05-30 [SCEA] [expires: 2020-08-23]
      DCAF AC85 B9BC 9906 2005  936A 3837 B7C0 EC44 F56A
      Keygrip = B60A813B74819BF15BF060B9C793B1ADB9445CFA
uid           [ultimate] William Bert <william.bert@gmail.com>
sub   rsa2048 2013-05-30 [SEA] [expires: 2020-08-23]
      Keygrip = 02FF654EA26BCB8C445C841E721EB4497D4C1754
sub   rsa2048 2017-01-25 [S] [expires: 2020-08-23]
      Keygrip = A7A4A1094E9721242A41BBC7AAAF8FA98AA74DE4

/usr/local $ export keygrip=A7A4A1094E9721242A41BBC7AAAF8FA98AA74DE4
/usr/local $ echo "KEYINFO --no-ask $keygrip Err Pmt Des" | gpg-connect-agent
S KEYINFO A7A4A1094E9721242A41BBC7AAAF8FA98AA74DE4 D - - - P - - -
OK
/usr/local $ export keygrip=B60A813B74819BF15BF060B9C793B1ADB9445CFA
/usr/local $ echo "KEYINFO --no-ask $keygrip Err Pmt Des" | gpg-connect-agent
S KEYINFO B60A813B74819BF15BF060B9C793B1ADB9445CFA D - - - P - - -
OK
#+END_SRC

GPG agent config file:
ls ~/.gnupg/gpg-agent.conf

Send SIGHUP to clear cache (didn't fix problem):
#+BEGIN_SRC bash
/usr/local $ ps -ef|grep gpg-agent
  501   448     1   0  2:19PM ??         0:00.01 /bin/bash /usr/local/MacGPG2/libexec/shutdown-gpg-agent
  501 14750     1   0  3:06PM ??         0:03.36 gpg-agent --homedir /Users/william/.gnupg --use-standard-socket --daemon
  501 33425  3433   0 10:25PM ttys037    0:00.00 grep gpg-agent
/usr/local $ kill -s HUP 14750
#+END_SRC

FIX: the problem was that somehow .authinfo.gpg had been encrypted with gpg 1.4.
I don't know how; I don't even know where the binary was located. The fix was to
download and make gpg 1.4 myself, and use it to decrypt .authinfo.

* bug https://github.com/joaotavora/yasnippet/commit/d3bb879356288ef38975fbf85947c7371b8c9759
* TODO PATH stuff
  - exec-path-from-shell creates a login shell at startup and reads PATH from
    it. Kind of a hack.
  - https://github.com/arouanet/path-helper is an alternative that uses macOS's
    own PATH infrastructure
    - /etc/paths is default
    - /etc/paths.d is for customization
    - path_helper is a macOS utility that reads these files
#+BEGIN_SRC sh
ls -l /etc/paths
cat /etc/paths
#+END_SRC

#+RESULTS:
| -rw-r--r--@ | 1 | root | wheel | 30 | Mar | 11 | 2017 | /etc/paths |
| /usr/bin    |   |      |       |    |     |    |      |            |
| /bin        |   |      |       |    |     |    |      |            |
| /usr/sbin   |   |      |       |    |     |    |      |            |
| /sbin       |   |      |       |    |     |    |      |            |

#+BEGIN_SRC sh
ls -l /etc/paths.d
#+END_SRC

#+RESULTS:
| total       | 24 |      |       |    |     |    |       |            |
| -rw-r--r--@ |  1 | root | wheel | 13 | Oct | 26 |  2016 | 40-XQuartz |
| -rw-r--r--@ |  1 | root | wheel | 23 | Jun |  4 | 03:13 | MacGPG2    |
| -rw-r--r--@ |  1 | root | wheel | 20 | Sep | 26 |  2017 | TeX        |
* TODO bundle use-package as part of emacs repo, or otherwise automatically install it if missing
* company-mode goals
** triggers and key bindings
   - trigger when type >3 or 4 chars
   - M-/ is hippie-expand in some modes, company-complete in others
   -
*** hippie-expand
esc-map /
global-map M-/

*** company-complete
company-mode-map M-/
ctl-x-map C-c <tab>
global-map C-x C-c <tab>
global-map H-0 <tab>
global-map H-c
wjb-map <tab>

*** company-other-backend
company-active-map M-/

** test cases for all the company backends
   - file
     - in js require
   - text
   - markdown
   - org
   - restclient
   - yasnippet
   - js/jsx
   - coffee
   - python
   - less
** yasnippet
   - wjb-map y
** company-buffer-lines
   - goal is to complete js import statements
   - company-same-mode-buffer-lines
** company-lsp
** statistics to choose common completions
** hippie-expand
   - is there a company bridge to this?
   - what hippie-expand functions am I using?
   - wjb-map h?
** js, jsx
   - good completion, especially of requires and imports
** text modes, markdown
   - sensible
   - integrates code
** org
   - currently get "company not enabled" in org
   - M-/ is hippie-expand
** coffee
** python
** emacs-lisp
** css/less
* ivy/counsel
  - [X] counsel-projectile-switch-project go directly to magit status buffer
    - counsel-projectile-switch-project with argument "v"
  - [ ] sdplay matches sd-playground. and mainel matches main.el
    - space makes a regex in ivy, might just get used to this
    - i can omit the sd when switching projects
    - i don't want to type - or . in queries, so - or . in results should "not count"
    - https://www.reddit.com/r/emacs/comments/aoqcyl/third_trial_for_a_weekly_tipstricksetc_thread/eg4azgy/
  - [ ] ordering of matches is directory/filename instead of filename|directory
    - I think this is due to open buffers having buffer|path vs. files that
      aren't opened being path/to/file. This is the buffer name: filename|path
    - different for switch-to-buffer vs. counsel-projectile-find-file
    - not so much of an issue when ordering doesn't matter
  - [X] ordering doesn't matter
    - ivy–regex-ignore-order
* random cruft from main.el
#+BEGIN_SRC emacs-lisp
;; (start-process NAME BUFFER PROGRAM &rest PROGRAM-ARGS)
;;
;; (setq debug-on-quit nil)
;;
;; TODO: when is semantic-symref-filepattern-alist available? Is it part of grep?
;; (eval-after-load "grep"
;;   '(progn
;;      (add-to-list 'semantic-symref-filepattern-alist '(js2-mode "*.js") t)
;;      (add-to-list 'semantic-symref-filepattern-alist '(coffee-mode "*.coffee") t)
;;      ))

#+END_SRC
* TODO prodigy for use docker startup script
* renice emacs

* TODO Review for ideas:
  - http://news.ycombinator.com/item?id=1654164
  - https://github.com/technomancy/emacs-starter-kit
  - https://github.com/bbatsov/prelude
  - https://github.com/purcell/emacs.d
  - https://raw.github.com/expez/.emacs.d/master/init-javascript.el
  - https://github.com/kaushalmodi/.emacs.d (setup-python)
  - http://gongzhitaao.org/dotemacs/
  - https://github.com/vidjuheffex/dotemacs/blob/master/emacs.org (literate)
  - https://github.com/GustafB/.emacs.d/blob/master/myinit.org (literate)
  - https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org (literate)
* Use!:
  - easy-kill M-w w/s/l/d/D
  - easy-mark C-M-spc, C-M-@, M-= then +/-
  - expand-region
  - bookmarks list:
    - C-x r l  = list
    - C-x r b  = jump
    - C-x r m  = set
#+BEGIN_SRC
Some keys in ‘*Bookmark List*’:

‘a’ – show annotation for the current bookmark
‘A’ – show all annotations for your bookmarks
‘d’ – mark various entries for deletion (‘x’ – to delete them)
‘e’ – edit the annotation for the current bookmark
‘m’ – mark various entries for display and other operations, (‘v’ – to visit)
‘o’ – visit the current bookmark in another window, keeping the bookmark list open
‘C-o’ – switch to the current bookmark in another window
‘r’ – rename the current bookmark
#+END_SRC
  - apropos-variable (apropos-value but it's slow)
  - magit-cherry-spinoff -- be on feature branch, move commits to master, then
    create new branch
  - magit-cherry-harvest -- be on master
  - magit-cherry-donate --
  - writable-grep mode: press w in grep buffer
  - smart-jump
  - helm-aws
  - smartscan: M-p and M-n to move foward/backward to occurences of symbol at point
  - C-x left, C-x right: back/forward buffer
  - C-M-c exit-recursive-edit
  - markdown-preview-mode
  - dig
  - list-timers
  - list-faces-display
  - list-processes
  - emacsclient -T
#+BEGIN_QUOTE
Emacsclient has a new option '-T' / '--tramp'.
This helps with using a local Emacs session as the server for a remote
emacsclient.  With appropriate setup, one can now set the EDITOR
environment variable on a remote machine to emacsclient, and
use the local Emacs to edit remote files via Tramp.  See the node
"(emacs) emacsclient Options" in the user manual for the details.
#+END_QUOTE
  - Occur
    - multi-occur-in-matching-buffers
  - subword-backward-kill (C-backspace, or M-backspace)
  - mc/
    - mc/edit-lines
    - mc/beginnings-of-lines (C-M-<)
    - mc/endings-of-lines (C-M->)
    - mc/mark-all-like-this (C-*)
    - mc/mark-all-words-like-this
    - mc/insert-numbers
  - org-table (convert-region, transpose, etc)
    - orgtbl-mode minor mode for working with tables
  - sorting
    - sort-lines
    - reverse-region
    - sort-fields and sort-numeric-fields
    - sort-regexp-fields
    - org-sort-entries
  - rectangle-number-lines (C-x r N)
  - Keyboard macros
    - counters:
      http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macro-Counter.html
      (C-x C-k C-i)
    - query: http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macro-Query.html#Keyboard-Macro-Query
    - stepwise edit: http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macro-Step_002dEdit.html#Keyboard-Macro-Step_002dEdit
  - set-goal-column (C-x C-n)
  - terminal-mode for ssh
  - color-themes
    - save current as?
    - use one that works for terminals
  - view-lossage (C-h l)
  - repeat (C-x z)
  - highlight-lines-matching-regexp (M-s h l)
  - tumme (images)
  - what-cursor-position (C-x =, also C-u C-x =)
  - shell-command-on-buffer (C-c ! [note: overwrites something in org-mode?])
  - eval
    - eval-and-replace (C-c C-e)
    - eval-expression (M-:, also eval and insert: C-u M-:)
  - ispell
  - dired-jump
  - clone-indirect-buffer http://www.gnu.org/software/emacs/manual/html_node/emacs/Indirect-Buffers.html
  - flush-lines <regex>, will delete matching lines. Enter ^$ to remove all blank lines.
  - other-frame reverse: C-- C-x 5 o
  - org-mode C-c C-u: outline-up-heading
  - C-0 (imenu)
  - clean-buffer-list
  - ibuffer to search or query-replace in marked buffers: https://www.emacswiki.org/emacs/IbufferMode
    - like dired for buffers. `/.` filters by file-extension. `//` clears filters.
  - reveal-in-osx-finder
  - eww
    - custom theme for eww: https://emacs.stackexchange.com/a/4285/2163
  - quickrun
  - C-c C-o for folding in js2-mode, C-Enter
  - projectile-find-file-dwim C-c p g
  - default-value
default-value is a built-in function in 'C source code'.

(default-value SYMBOL)

Return SYMBOL's default value.
This is the value that is seen in buffers that do not have their own values
for this variable.  The default value is meaningful for variables with
local bindings in certain buffers.

** DONE
  - zap-to-char (M-z and M-Z)
  - Tramp:
    - C-x C-f /sudo:root@localhost:/private/etc/hosts  *or*  C-x C-f /sudo::/private/etc/hosts
    - C-x C-f /docker:user@container:/path/to/file
    - C-x C-f /ssh:wbert@wjb.sh:/etc
  - Smex (M-x, M-X)
    - updated fork: https://github.com/DarwinAwardWinner/smex
  - align-regexp (C-|)
  - join-line (C-c C-j)
  - Org-mode (C-c C-n/p; C-c C-f/b)
* wishlist                                                         :wishlist:
  - dumb-jump or smart-jump for jsx
  - magit status buffer lets me next-line past worktrees
  - fix magit stash save -- it's always empty now -- why?
  - [ ] fill comment paragraphs nicely, including when they contain bulleted
    lists and such (need to fix paragraph-start variable)
    - it should match lines that look like # - or * - or // * or // - for markdown style lists
    - https://stackoverflow.com/questions/71788/getting-emacs-fill-paragraph-to-play-nice-with-javadoc-like-comments
    - http://barelyenough.org/blog/2006/10/nicer-phpdoc-comments/
  - kill full urls and email addresses in markdown mode, text mode, comments.
    kill-thing-at-point, kill-word.
    - helpful: https://emacs.stackexchange.com/questions/19508/kill-url-at-point
    - easy-kill
  - [X]  defun to insert date in form of 2018-09-01 -> wjb/insert-date
  - for every project, have a sane-term open, to make it easy to jump to a terminal
  - [ ] switch-to-compilation buffer works with *jest* buffers
    - maybe do this via projectile
  - bind compilation buffers to projects via projectile, purpose, or perspectiv
    - maybe a frame per project? but only if frame switching is super-easy
    - and it'd be great to automatically focus the current project in dirtree
  - don't fill code, eg, text within code fences in markdown mode
``` shell
$ aws ecs update-service --cluster <cluster name> --service <service name> --force-new-deployment
```
   - automatically open project in dirtree when switch to it
     - probably can use projectile hook of some kind
   - [X] Use compile buffer, jump to failing tests
     - [X] unit tests
     - integration tests
   - [X] project commands work from local_notes
     - SOLVED with # -*- default-directory: "/Users/william/scm/sd/sd-playground"; -*-
     - helpful for .rest and .org files
     - for example, magit-status, and projectile find file
     - but what about cases where a notes file is symlinked from multiple dirs?
     - somewhat related: https://github.com/magit/magit/issues/1769
#+BEGIN_SRC emacs-lisp
;; if magit-toplevel is nil, and if current directory is a symlink, then check
magit-toplevel of ..
(unless (magit-toplevel)
  (if (file-symlink-p default-directory) (magit-toplevel ..)))
#+END_SRC

#+BEGIN_SRC sh
 ~/.../sd-playground/local_notes $ git rev-parse --show-toplevel
fatal: not a git repository (or any of the parent directories): .git
#+END_SRC
   - [X] really, truly skip husky
     - magit runs "git commit". NEODARWIN_SKIP_PRECOMMIT is in process environment.
     - hooks/pre-commit runs, looks like it does a bunch of stuff with nvm,
       which is bad because nvm is slow. It uses has_hook_script to checks
       whether package.json has a "precommit" task; if not, it exits; if so, it
       runs it.
       - So I'll change this to bail when NEODARWIN_SKIP_PRECOMMIT=1
#+BEGIN_SRC bash
[[ "$NEODARWIN_SKIP_PRECOMMIT" -eq 1 ]] && exit 0
#+END_SRC
     - Then the hook runs the npm precommit task, which bails dues to
       NEODARWIN_SKIP_PRECOMMIT before lint-staged (which includes prettier) runs.
     - If/when we upgrade husky, this will probably get overwritten... Use
       HUSKY_SKIP_INSTALL (see https://github.com/typicode/husky/issues/172)
** $sh mode
   - knows about shell commands written out like so:
#+BEGIN_SRC
$ ls
$ pwd
/usr/local
#+END_SRC
   - works in markdown-mode
#+BEGIN_SRC markdown
Here are some commands to run:

    $ ls
    $ pwd
#+END_SRC
   - works if stuff is front of the $, for example:
#+BEGIN_SRC markdown
    (hegemone) $ workon hegemone
    (hegemone) $ python manage.py showmigrations \
                    --settings sd_hegemone.sd_hegemone.settings_atalanta
#+END_SRC
   - navigation commands put point after the "$ "
#+BEGIN_SRC
$ ls
  ^ point is here
#+END_SRC
   - prompt-line- is the prefix:
     - next
     - previous
     - kill -- don't kill the $, just the command
     - mark-region
     - new-line
